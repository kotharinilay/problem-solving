Problem Description:
Given an array of integers A and an integer B.
Find the total number of subarrays having sum equals to B.


Problem Constraints:
 1 <= length of the array <= 50000
-1000 <= A[i] <= 1000


Example Input
Input 1:
A = [1, 0, 1]
B = 1

Input 2:
A = [0, 0, 0]
B = 0


Example Output
Output 1:
4

Output 2:
6


Example Explanation
Explanation 1:
[1], [1, 0], [0, 1] and [1] are four subarrays having sum 1.

Explanation 2:
All the possible subarrays having sum 0.


Solution:
- When problem is about subarray and we want to find sum of possible subarray, prefix sum is what we can think of.
- For given array, if we want sum of any subarray, we can get it using pf[j] - pf[i] where j > i and it's index of prefix sum array built from given array
- now we can start iterating array and maintain sum in hashmap with it's frequency.
- here we are maintaining sum of each element in hashmap which are our pf[i], and current prefix element will become pf[j].
- as pf[j] - pf[i] = K, and we have pf[j] as current prefix sum element, we need to check if we have pf[i] available
- so pf[i] = pf[j] - K, which we check in hash map if exist or not, and if exist, we will add it's frequency to answer.
