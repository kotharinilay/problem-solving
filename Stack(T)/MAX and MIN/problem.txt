MAX and MIN

Problem Description:
Given an array of integers A.
The value of an array is computed as the difference between the maximum element in the array and the minimum element in the array A.
Calculate and return the sum of values of all possible subarrays of A modulo 109+7.

Problem Constraints:
1 <= |A| <= 100000
1 <= A[i] <= 1000000

Input Format:
The first and only argument given is the integer array A.

Output Format:
Return the sum of values of all possible subarrays of A modulo 109+7.

Example Input:
Input 1:
 A = [1]

Input 2:
 A = [4, 7, 3, 8]

Example Output:
Output 1:
 0
Output 2:
 26

Example Explanation:
Explanation 1:
Only 1 subarray exists. Its value is 0.

Explanation 2:
value ( [4] ) = 4 - 4 = 0
value ( [7] ) = 7 - 7 = 0
value ( [3] ) = 3 - 3 = 0
value ( [8] ) = 8 - 8 = 0
value ( [4, 7] ) = 7 - 4 = 3
value ( [7, 3] ) = 7 - 3 = 4
value ( [3, 8] ) = 8 - 3 = 5
value ( [4, 7, 3] ) = 7 - 3 = 4
value ( [7, 3, 8] ) = 8 - 3 = 5
value ( [4, 7, 3, 8] ) = 8 - 3 = 5
sum of values % 10^9+7 = 26


Solution:
- Here BF approach iterate over each sub array and maintain min and max of each sub array and find ans, which will have O(n^2) TC.
- As we want different of min and max of all the sub array, we can think of contribution technique.
- As we need min and max of all sub array, we need to prepare nearest small and large numbers on left and right side. 
Using which we can identify that each element will be part of how many sub array as minimum or maximum element.
- i.e. for nearest small number on left/right side any number A[i] will be minimum between nsl[i] and nsr[i].
- So to calculate number of subarray where A[i] will be minimum number: starting indexes of those sub array will be between nsl[i] and i and ending indexes will be between i and nsr[i]
- now we can find number of subarray where any element is part of with formula (number of starting indexes) * (number of ending indexes)
- and we can multiply A[i] with number of subarray that element is part of to find its contribution as min and max element.

NOTE: here this nearest small and great o left and right side will work only if array won't have duplicate elements.
If array will have duplicate then while preparing nearest array, on left side it should be calculated as strictly greater/smaller elements
                                                                 on right side it should be calculates as greater/smaller or equal elements.

Here strict means while remove elements from stack it should be <= (for greater) and >= (for smaller) and for non strict it should be < or > while removing elements from stack